// Q51 - Write an SQL query to report the name, population, and area of the big countries
SELECT name, population, area FROM World WHERE population >= 25000000 OR area >= 3000000;


// Q52 - Write an SQL query to report the names of the customer that are not referred by the customer with id = 2
SELECT name FROM Customer where ref_id is NULL
UNION
SELECT name FROM Customer where ref_id != 2;


# Q53 - Write an SQL query to report all customers who never order anything
# with JOINS
SELECT c.name as Customers FROM Customers c
LEFT JOIN Orders o on c.id = o.cust_id
WHERE o.cust_id IS NULL;

SELECT name as Customers from Customers
WHERE id NOT IN(SELECT cust_id FROM Orders);

// Q54 and 56 are repeated from Set1

# Q57 - Write an SQL query to find the customer_number for the customer who has placed the largest number of orders
SELECT cust_number FROM order_num GROUP BY cust_number ORDER BY COUNT(order_number) DESC LIMIT 1;


# Q58 - Write an SQL query to report all the consecutive available seats in the cinema
SELECT DISTINCT c1.seat_id FROM Cinema c1 JOIN Cinema c2 ON abs(c1.seat_id - c2.seat_id) = 1 AND c1.free = 1 and c2.free = 1
ORDER BY c1.seat_id;


# Q60 - Write an SQL query to report for every three line segments whether they can form a triangle
SELECT *,
CASE
    when x+y <= z OR x+z <=y OR y+z <= x then "No"
    else "Yes" 
end as Triangle
FROM Triangle;

# Q61
SELECT MIN(abs(p2.x - p1.x)) as shortest
FROM Point p1 JOIN Point p2
ON p1.x != p2.x;

# Q62 - Write a SQL query for a report that provides the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times
SELECT actor_id,dir_id FROM act_dir GROUP BY actor_id,dir_id HAVING count(*) >= 3;

# Q63 - Write an SQL query that reports the product_name, year, and price for each sale_id in the Sales table
SELECT p.product_name,s.year,s.price FROM Product p INNER JOIN Sales s ON s.product_id = p.product_id;

# Q64 - Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits
SELECT p.project_id, round(AVG(exp),2) as avg_years FROM Employee e INNER JOIN Project p ON p.emp_id = e.emp_id GROUP BY project_id;

// Q65 - Write an SQL query that reports the best seller by total sales price, If there is a tie, report them all
SELECT seller_id, MAX(tot) as price FROM (SELECT seller_id,SUM(price) as tot FROM Sales GROUP BY seller_id) foo GROUP BY seller_id ORDER BY price DESC LIMIT 2;

SELECT top 1 with ties seller_id,SUM(price) as tot FROM Sales GROUP BY seller_id ORDER BY tot DESC;

# Q66
SELECT s.buyer_id FROM Product p JOIN Sales s ON p.product_id = s.product_id GROUP BY s.buyer_id having sum(p.product_id = 1) > 0 AND sum(p.product_id = 3) = 0;
