CREATE DATABASE sathiya;

show DATABASES;
show TABLES;


# Sample Dataset - 1
CREATE Table city
(
    ID INT,
    Name VARCHAR(17),
    countryCode VARCHAR(3),
    District VARCHAR(20),
    Population INT
);

Insert INTO city VALUES(6,'Rotterdam','NLD','Zuid-Holland',593321),(3878,'Scottsdale','USA','Arizona',202705),(3965,'Corona','USA','California',124966),
                       (3973,'Concord','USA','Zuid-Holland',121780),(3977,'Cedar Rapids','USA','Iowa',120758),(3982,'Coral Springs','USA','Florida',117549),
                       (4054,'Fairfield','USA','California',92256),(4058,'Boulder','USA','Colorado',91238),(4061,'Fall River','USA','Massachusetts',90555); 

SELECT * from city;

# Q1 - Query all columns for all American cities in the CITY table with populations larger than 100000
SELECT * from city WHERE countryCode = 'USA' and Population > 100000;

# Q2 - Query the NAME field for all American cities in the CITY table with populations larger than 120000
SELECT Name,Population from city WHERE countryCode = 'USA' and Population > 120000;

# Q3 - Query all columns (attributes) for every row in the CITY table
select * from city;

# Q4 - Query all columns for a city in CITY with the ID 1661 or 6(ID - 6 is what mentioned in the sample dataset)
select * from city where id = 6;

# Q5 - Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN(But there is no record for JPN cities)
SELECT * from city WHERE countryCode = 'JPN';

# Q6 - Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN
SELECT Name from city WHERE countryCode = 'JPN';

---------------------------------------


// Sample Dataset - 2
select * from station;

// Q7 - Query a list of CITY and STATE from the STATION table
select city, state from station;

// Q8 -  Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer
select distinct id, city from station where id % 2 = 0;

// Q9 - Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
select (count(city) - count(distinct city)) as cities from station;

// Q10 - Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
select city, length(city) as cit from station where length(city) like (select max(length(city)) from station) order by city desc;

select city, length(city) as cit from station where length(city) like (select min(length(city)) from station) order by city desc;

// Result in a single table
select * from(
select city, length(city) as size from station order by size desc, city desc limit 1) tblMax
UNION
select * from(
select city, length(city) as size from station order by size asc,city asc limit 1) TblMin;

// Q11 - Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates
select city from station where (city like 'A%' or city like 'E%' or city like 'I%' or city like 'O%' or city like 'U%');

// Q12 - Query the list of CITY names ending with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates
select distinct city from station where (city like '%a' or city like '%e' or city like '%i' or city like '%o' or city like '%u');

// Q13 - Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
select distinct city from station where not (city like 'A%' or city like 'E%' or city like 'I%' or city like 'O%' or city like 'U%');

// Q14 - Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
select distinct city from station where not(city like '%a' or city like '%e' or city like '%i' or city like '%o' or city like '%u');

// Q15 - Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[^AEIOU].*[^aeiou]$';

// Q16 - Query the list of CITY names from STATION that start with vowels or end with vowels
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[AEIOU].*[aeiou]$';

--------------------------------------

# Q17
CREATE TABLE Product
(
    product_id int,
    product_name VARCHAR(20),
    unit_price int,
    UNIQUE(product_id)
);

CREATE Table Sales
(
    seller_id int,
    product_id int,
    buyer_id int,
    sales_date DATE,
    quantity INT,
    price INT
);

Insert INTO Product VALUES(1,'S8',1000),(2,'G4',800),(3,'iPhone',1400),(4,'Moto G82', 1900);

INSERT INTO Sales VALUES(1,1,1,'2019-01-21',2,2000),(1,2,2,'2019-02-17',1,800),(2,2,3,'2019-06-02',1,800),(3,3,4,'2019-05-13',2,2800);

SELECT * from Product;
SELECT * from Sales;

# Q17 - Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.
select p.product_id, p.product_name from Product p INNER JOIN 
(SELECT product_id, MAX(sales_date) as s_max from Sales GROUP BY product_id) s1 
on p.product_id = s1.product_id where s1.s_max < '2019-03-31';

-----------------------

# Q18
CREATE TABLE Views
(
    article_id int,
    author_id int,
    viewer_id int,
    view_date date
);

INSERT INTO Views VALUES(1,3,5,'2019-08-01'),(1,3,6,'2019-08-02'),(2,7,7,'2019-08-01'),(2,7,6,'2019-08-02'),
                        (4,7,1,'2019-07-22'),(3,4,4,'2019-07-21'),(3,4,4,'2019-07-21');

SELECT * from Views;

# Q18 - Write an SQL query to find all the authors that viewed at least one of their own articles.
select distinct author_id as id from Views where author_id in (select viewer_id from Views)
ORDER BY author_id ASC;

------------

#Q19
CREATE TABLE Delivery
(
    delivery_id int,
    cust_id int,
    order_date date,
    cust_pref_delivery_date date,
    PRIMARY KEY(delivery_id)
);

INSERT INTO Delivery VALUES(1,1,'2019-08-01','2019-08-02'),(2,5,'2019-08-02','2019-08-02'),(3,1,'2019-08-11','2019-08-11'),(4,3,'2019-08-24','2019-08-26'),
                            (5,4,'2019-08-21','2019-08-22'),(6,2,'2019-08-11','2019-08-13');


SELECT * from Delivery;

# Q19 - Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places
SELECT ifnull(
    round(
        (SELECT count(*) from Delivery WHERE order_date = cust_pref_delivery_date) / (count(delivery_id)) * 100, 2)
    , NULL
)
as immediate_percent from Delivery;

# Q20
CREATE TABLE Ads
(
    ad_id int,
    user_id int,
    action enum('Clicked','Viewed','Ignored')NOT NULL,
    PRIMARY KEY(ad_id, user_id)
);

INSERT INTO Ads VALUES(1,1,'Clicked'),(2,2,'Clicked'),(3,3,'Viewed'),(5,5,'Ignored'),(1,7,'Ignored'),(2,7,'Viewed'),(3,5,'Clicked'),(1,4,'Viewed'),(2,11,'Viewed'),(1,2,'Clicked');

SELECT * FROM Ads;

# Q20 - Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points



# Q21
CREATE TABLE Employee
(
    emp_id int,
    team_id int
);

INSERT INTO Employee VALUES(1,8),(2,8),(3,8),(4,7),(5,9),(6,9);

SELECT * FROM Employee;

# Q21 - Write an SQL query to find the team size of each of the employees.
select emp_id, COUNT(*) over (partition by team_id) as team_id
from Employee ORDER BY emp_id ASC;

# using CASE statement
select emp_id,
CASE
    when team_id is NOT NULL then  count(*) over (partition by team_id)
    else NULL
end as team_id from Employee
ORDER BY emp_id ASC;

# Q24 / Q25
CREATE TABLE Activity
(
    player_id int,
    device_id int,
    event_date date,
    games_played int
);

INSERT INTO Activity VALUES(1,2,'2016-03-01',5),(1,2,'2016-05-02',6),(2,3,'2017-06-25',1),(3,1,'2016-03-02',0),(3,4,'2018-07-03',5);

select * from Activity;

# Q24 - Write an SQL query to report the first login date for each player
select player_id, MIN(event_date) from Activity GROUP BY player_id;

# Q25 - Write an SQL query to report the device that is first logged in for each player
SELECT player_id, MIN(device_id) FROM Activity GROUP BY player_id;

# Q44
CREATE TABLE employees
(
    emp_id int,
    emp_name varchar(20),
    dept varchar(5),
    man_id int
);

INSERT INTO employees VALUES(101,'John','A',NULL),(102,'Dan','A',101),(103,'James','A',101),(104,'Amy','A',101),(105,'Anne','A',101),(106,'Ron','B',101);

SELECT * FROM employees;
# Q44 - Write an SQL query to report the managers with at least five direct reports
SELECT emp_name from employees where emp_id in(
select man_id from employees GROUP BY man_id HAVING count(emp_id) >= 5);


# Q27
CREATE TABLE Users
(
    user_id int,
    name varchar(20),
    email varchar(50)
);

INSERT INTO Users VALUES(1,'Winston','winston@leetcode.com'),(2,'Jon','jonathanisgreat'),(3,'Anna','bella-@leetcode.com'),(4,'Sally','sally.come@leetcode.com'),
(5,'Marwan','quarz#2020@leetcode.com'),(6,'David','david69@gmail.com'),(7,'Shapiro','.shapo@leetcode.com');

SELECT * FROM Users;
# Q27 - Write an SQL query to find the users who have valid emails
SELECT * FROM Users where email REGEXP ('^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode[.]com');
SELECT * FROM Users WHERE REGEXP_LIKE (email, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com');

