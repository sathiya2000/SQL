
# Q103 - Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name
SELECT name FROM students WHERE marks > 75 ORDER BY RIGHT(name, 3) ASC;

# Q104 - Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order
SELECT name FROM employee ORDER BY name ASC;

# Q105 - Write a query that prints a list of employee names (i.e.: the name attribute) for employees in
# Employee having a salary greater than $2000 per month who have been employees for less than 10 months
SELECT name FROM employee WHERE salary > 2000 AND months < 10 ORDER BY emp_id ASC;

# Q106 - Write a query identifying the type of each record in the TRIANGLES table using its three side lengths
SELECT
CASE
    when a+b <= c OR b+c <= a OR a+c <= b then "Not A Triangle"
    when a = b AND b = c then "Equilateral"
    when a=b OR b=c OR c=a then "Isosceles"
    when a != b AND b != c then "Scalene" 
end as Types
FROM Triangle;

# Q107 - Write a query calculating the amount of error (i.e.: actual - miscalculated average monthly salaries), and round it up to the next integer
SELECT round(AVG(salary)) - round(AVG(replace(salary,0,''))) as avg_sal FROM salary;

# Q108 - Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings
select max(salary * months) as max_sal, count(*) as count FROM employee WHERE (salary * months) in (SELECT max(salary * months) FROM employee);

# Q109 - Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical
SELECT name,substring(occupation,1,1) occupation FROM Occupation ORDER BY name ASC;

# Q109 - Query the number of occurrences of each occupation in OCCUPATIONS
SELECT COUNT(occupation) as counts, occupation FROM Occupation GROUP BY occupation ORDER BY counts ASC;

# Q111 - Write a query to find the node type of Binary Tree ordered by the value of the node
SELECT n,
CASE 
    when n NOT IN(SELECT p FROM node WHERE p is NOT NULL) then 'Leaf'
    when p is NULL then 'Root'
    else 'Inner'
end as node_type
from node ORDER BY n ASC;
